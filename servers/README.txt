tips
1.代码不是down下来就能直接跑的，根据自己ide创建项目导入代码即可。
2.依赖已经放在libs里面了，没有依赖中央仓库那么方便，但是用作学习也足够了。
3.nacos在0.9版本之后就不再支持服务内单个节点的变化推送，订阅服务的节点发生变化事件中拿到的是服务内的全部节点，
所以处理游戏服战斗服数据服这种节点特别多的服务时不建议走nacos的订阅事件，可以依赖服务器定时从nacos拿到服务内
的所有节点来进行维护
4.待完善：把0.9之前版本的节点状态变更增量推送代码改到当前使用的nacos版本中，但是根据自己项目需求改这类工具的
源码都会遇到同一个问题，就是对于工具修复bug和拓展功能时的更新不能直接使用，需要检查新版本源码中可能对自己修
改过的内容起到的影响的部分
5.因为之前项目都没有用过spring，而且还曾经被人说过搞java的居然不了解spring，所以项目里尝试性的用了一下，如果有
好心人发现我使用中的问题请务必通知我

梗概
1.服务发现和rpc
    1.依赖nacos做服务发现和配置中心
    2.服务器起服时从nacos配置中心拿到自己本地nacos配置文件group和dataid对应的服务器配置信息并进行初始化
    3.初始化时根据自己的服务器配置信息向nacos注册并且订阅需要监听的服务和维护自己不订阅但是需要监听的服务列表
    详见AbstractNacosRegister

2.服务器分类
    1.db 数据服，每个数据服持有若干个mysql数据库和redis的连接池，依赖配置对应，redis做二级缓存，代码详见CacheDao。
	其他服务器数据操作依赖调用数据服的服务
    2.game 游戏服 游戏业务服务器 常规
    3.login 登录服 统一走登录服通过校验后返回相应的gate网关服地址 通过网关服来进行和游戏服的通信  
    4.gate 网关服 网关服用netty来处理网络通讯 并且调用游戏服相关的rpc服务（此处也可以游戏服上也启一个netty，网关服做消息转发）
    5.manager 管理服 用来进行服务器的管理，资源更新通知等统一操作
    6.match 匹配服  用作战斗匹配，一个匹配服可以持有多种匹配处理器 用来处理不同的匹配需求，也可以做跨服缓存数据，游戏服根据配
	置将匹配请求路由到不同的匹配服上
    7.fight 战斗服 udp实现网络通讯，必须做内存池减少GC频次，处理帧同步战斗相关的广播（状态同步的MMO游戏可以划分出场景服来做此
	类型功能？没做过MMO希望有机会尝试）
    8.fightmanager 战斗管理服，用来分配战斗服。每个战斗管理服理论上应该和战斗服处于同一机房或者有专线连接，保证客户端连接战斗
	管理服和其管理的战斗服组时ping值一致。客户端持有不同战斗管理服对应的代理地址，这个地址用来让玩家ping不同区域的战斗管理服，
	这样客户端就持有一个根据ping值从低到高的战斗服组的列表，在做战斗服分配时可以优先给玩家分配ping值最低的战斗服组
    9.check 后置校验服 用来做关键战斗的校验，比方奖励重要的多人战斗。除了在游戏服对比同场战斗内的不同客户端的战斗结算一致性和
	中途的数据采样以外，为了防止外挂还会把配置的特定类型战斗的帧数据保存在文件，用后置校验服调用脚本向前端战斗代码生成的可运行
	程序输入帧数据，得到正确的结果对比玩家上传的结算数据